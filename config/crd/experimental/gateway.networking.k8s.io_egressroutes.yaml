apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    api-approved.kubernetes.io: https://github.com/kubernetes-sigs/gateway-api/pull/2466
    gateway.networking.k8s.io/bundle-version: v1.0.0
    gateway.networking.k8s.io/channel: experimental
  creationTimestamp: null
  name: egressroutes.gateway.networking.k8s.io
spec:
  group: gateway.networking.k8s.io
  names:
    categories:
    - gateway-api
    kind: EgressRoute
    listKind: EgressRouteList
    plural: egressroutes
    singular: egressroute
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1alpha2
    schema:
      openAPIV3Schema:
        description: |-
          EgressRoute provides a way to route Egress traffic. When combined with a Gateway
          listener, it can be used to forward traffic on the port specified by the
          listener to a set of backends specified by the EgressRoute.
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: Spec defines the desired state of EgressRoute.
            properties:
              debugLogEnabled:
                description: |-
                  DebugLogEnabled Boolean for allowing user to enable/disable
                  egress iRule debug logging


                  Valid values include:


                  * "true", "false"
                type: boolean
              disableListedVlans:
                description: |-
                  DisableListedVlans Boolean for allowing user to enable/disable
                  egress iRule debug logging


                  Default: true
                  Valid values include:


                  * "true", "false"
                type: boolean
              dnsCacheName:
                description: |-
                  DnsCacheName


                  Valid values include:


                  * "true", "false"
                type: string
              dnsNat46Enabled:
                description: |-
                  DnsNat46Enabled refers to DNS NAT ipv4 to ipv6 Enabled.


                  Valid values include:


                  * "true", "false"
                type: boolean
              dnsNat46Ipv4Subnet:
                description: |-
                  DnsNat46Ipv4Subnet refers to DNS NAT ipv4 to ipv6 Subnet.
                  Default value: "10.2.2.0/24"


                  Valid values include:


                  * "10.2.2.0/24"
                type: string
              dnsNat46PoolIps:
                description: |-
                  DnsNat46PoolIps refers to DNS NAT ipv4 to ipv6 Pool IPs.


                  Valid values include:


                  * {"10.1.1.1", "10.2.2.2"}
                items:
                  type: string
                type: array
              dnsNat46SorryIp:
                description: |-
                  DnsNat46SorryIp refers to DNS NAT ipv4 to ipv6 Sorry IP.
                  Default value: "192.168.1.1"


                  Valid values include:


                  * "192.168.1.1"
                type: string
              dnsRateLimit:
                description: |-
                  DnsRateLimit Rate Limit is for DNS Virtual Server on a per pod
                  basis. To disable the rate limit set value to 0.


                  Default: 0
                  Min: 0
                  Max: 4294967295
                  Valid values include:
                  * 0 - 4294967295
                type: integer
              dualStackEnabled:
                description: |-
                  DualStackEnabled refers to Dual Stack Support.


                  Valid values include:


                  * "true", "false"
                type: boolean
              maxDNS46TTL:
                description: |-
                  MaxDNS46TTL The ceiling for DNS46 translation TTL,
                  AAAA TTLs greater than max is set to max.


                  Default: 120
                  Min: 1
                  Max: 2147483647
                  Valid values include:
                  * 0 - 2147483647
                type: integer
              maxReservedStaticIps:
                description: |-
                  MaxReservedStaticIps The maximum IPv4 addresses reserved from the
                  given CIDR Block "dnsNat46Ipv4Subnet" for static IPv4<-->IPv6
                  mapping. These reserved IPs will be from the beginning of the
                  CIDR Block. Rest of the IPs from the given CIDR Block will be
                  distributed across TMM Pods based on the value in "maxTmmReplicas".


                  Default: 0


                  Valid values include:
                  * 0
                type: integer
              maxTmmReplicas:
                description: |-
                  MaxTmmReplicas The maximum number of allowed operational tmm pods.
                  This should equal the number of SelfIps.


                  Default: 1


                  Valid values include:
                  * 1
                type: integer
              nat64Enabled:
                description: |-
                  Nat64Enabled refers to NAT ipv6 to ipv4 Enabled.


                  Valid values include:


                  * "true", "false"
                type: boolean
              nat64Ipv6Subnet:
                description: |-
                  Nat64Ipv6Subnet refers to NAT ipv6 Subnet.
                  Default: "64:ff9b::/96"


                  Valid values include:


                  * "64:ff9b::/96"
                type: string
              parentRefs:
                description: |+
                  ParentRefs references the resources (usually Gateways) that a Route wants
                  to be attached to. Note that the referenced parent resource needs to
                  allow this for the attachment to be complete. For Gateways, that means
                  the Gateway needs to allow attachment from Routes of this kind and
                  namespace. For Services, that means the Service must either be in the same
                  namespace for a "producer" route, or the mesh implementation must support
                  and allow "consumer" routes for the referenced Service. ReferenceGrant is
                  not applicable for governing ParentRefs to Services - it is not possible to
                  create a "producer" route for a Service in a different namespace from the
                  Route.


                  There are two kinds of parent resources with "Core" support:


                  * Gateway (Gateway conformance profile)

                  * Service (Mesh conformance profile, experimental, ClusterIP Services only)

                  This API may be extended in the future to support additional kinds of parent
                  resources.


                  ParentRefs must be _distinct_. This means either that:


                  * They select different objects.  If this is the case, then parentRef
                    entries are distinct. In terms of fields, this means that the
                    multi-part key defined by `group`, `kind`, `namespace`, and `name` must
                    be unique across all parentRef entries in the Route.
                  * They do not select different objects, but for each optional field used,
                    each ParentRef that selects the same object must set the same set of
                    optional fields to different values. If one ParentRef sets a
                    combination of optional fields, all must set the same combination.


                  Some examples:


                  * If one ParentRef sets `sectionName`, all ParentRefs referencing the
                    same object must also set `sectionName`.
                  * If one ParentRef sets `port`, all ParentRefs referencing the same
                    object must also set `port`.
                  * If one ParentRef sets `sectionName` and `port`, all ParentRefs
                    referencing the same object must also set `sectionName` and `port`.


                  It is possible to separately reference multiple distinct objects that may
                  be collapsed by an implementation. For example, some implementations may
                  choose to merge compatible Gateway Listeners together. If that is the
                  case, the list of routes attached to those resources should also be
                  merged.


                  Note that for ParentRefs that cross namespace boundaries, there are specific
                  rules. Cross-namespace references are only valid if they are explicitly
                  allowed by something in the namespace they are referring to. For example,
                  Gateway has the AllowedRoutes field, and ReferenceGrant provides a
                  generic way to enable other kinds of cross-namespace reference.



                  ParentRefs from a Route to a Service in the same namespace are "producer"
                  routes, which apply default routing rules to inbound connections from
                  any namespace to the Service.


                  ParentRefs from a Route to a Service in a different namespace are
                  "consumer" routes, and these routing rules are only applied to outbound
                  connections originating from the same namespace as the Route, for which
                  the intended destination of the connections are a Service targeted as a
                  ParentRef of the Route.






                items:
                  description: |-
                    ParentReference identifies an API object (usually a Gateway) that can be considered
                    a parent of this resource (usually a route). There are two kinds of parent resources
                    with "Core" support:


                    * Gateway (Gateway conformance profile)
                    * Service (Mesh conformance profile, experimental, ClusterIP Services only)


                    This API may be extended in the future to support additional kinds of parent
                    resources.


                    The API object must be valid in the cluster; the Group and Kind must
                    be registered in the cluster for this reference to be valid.
                  properties:
                    group:
                      default: gateway.networking.k8s.io
                      description: |-
                        Group is the group of the referent.
                        When unspecified, "gateway.networking.k8s.io" is inferred.
                        To set the core API group (such as for a "Service" kind referent),
                        Group must be explicitly set to "" (empty string).


                        Support: Core
                      maxLength: 253
                      pattern: ^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
                      type: string
                    kind:
                      default: Gateway
                      description: |-
                        Kind is kind of the referent.


                        There are two kinds of parent resources with "Core" support:


                        * Gateway (Gateway conformance profile)
                        * Service (Mesh conformance profile, experimental, ClusterIP Services only)


                        Support for other resources is Implementation-Specific.
                      maxLength: 63
                      minLength: 1
                      pattern: ^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$
                      type: string
                    name:
                      description: |-
                        Name is the name of the referent.


                        Support: Core
                      maxLength: 253
                      minLength: 1
                      type: string
                    namespace:
                      description: |-
                        Namespace is the namespace of the referent. When unspecified, this refers
                        to the local namespace of the Route.


                        Note that there are specific rules for ParentRefs which cross namespace
                        boundaries. Cross-namespace references are only valid if they are explicitly
                        allowed by something in the namespace they are referring to. For example:
                        Gateway has the AllowedRoutes field, and ReferenceGrant provides a
                        generic way to enable any other kind of cross-namespace reference.



                        ParentRefs from a Route to a Service in the same namespace are "producer"
                        routes, which apply default routing rules to inbound connections from
                        any namespace to the Service.


                        ParentRefs from a Route to a Service in a different namespace are
                        "consumer" routes, and these routing rules are only applied to outbound
                        connections originating from the same namespace as the Route, for which
                        the intended destination of the connections are a Service targeted as a
                        ParentRef of the Route.



                        Support: Core
                      maxLength: 63
                      minLength: 1
                      pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?$
                      type: string
                    port:
                      description: |+
                        Port is the network port this Route targets. It can be interpreted
                        differently based on the type of parent resource.


                        When the parent resource is a Gateway, this targets all listeners
                        listening on the specified port that also support this kind of Route(and
                        select this Route). It's not recommended to set `Port` unless the
                        networking behaviors specified in a Route must apply to a specific port
                        as opposed to a listener(s) whose port(s) may be changed. When both Port
                        and SectionName are specified, the name and port of the selected listener
                        must match both specified values.



                        When the parent resource is a Service, this targets a specific port in the
                        Service spec. When both Port (experimental) and SectionName are specified,
                        the name and port of the selected port must match both specified values.



                        Implementations MAY choose to support other parent resources.
                        Implementations supporting other types of parent resources MUST clearly
                        document how/if Port is interpreted.


                        For the purpose of status, an attachment is considered successful as
                        long as the parent resource accepts it partially. For example, Gateway
                        listeners can restrict which Routes can attach to them by Route kind,
                        namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
                        from the referencing Route, the Route MUST be considered successfully
                        attached. If no Gateway listeners accept attachment from this Route,
                        the Route MUST be considered detached from the Gateway.


                        Support: Extended


                      format: int32
                      maximum: 65535
                      minimum: 1
                      type: integer
                    sectionName:
                      description: |-
                        SectionName is the name of a section within the target resource. In the
                        following resources, SectionName is interpreted as the following:


                        * Gateway: Listener Name. When both Port (experimental) and SectionName
                        are specified, the name and port of the selected listener must match
                        both specified values.
                        * Service: Port Name. When both Port (experimental) and SectionName
                        are specified, the name and port of the selected listener must match
                        both specified values. Note that attaching Routes to Services as Parents
                        is part of experimental Mesh support and is not supported for any other
                        purpose.


                        Implementations MAY choose to support attaching Routes to other resources.
                        If that is the case, they MUST clearly document how SectionName is
                        interpreted.


                        When unspecified (empty string), this will reference the entire resource.
                        For the purpose of status, an attachment is considered successful if at
                        least one section in the parent resource accepts it. For example, Gateway
                        listeners can restrict which Routes can attach to them by Route kind,
                        namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
                        the referencing Route, the Route MUST be considered successfully
                        attached. If no Gateway listeners accept attachment from this Route, the
                        Route MUST be considered detached from the Gateway.


                        Support: Core
                      maxLength: 253
                      minLength: 1
                      pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
                      type: string
                  required:
                  - name
                  type: object
                maxItems: 32
                type: array
                x-kubernetes-validations:
                - message: sectionName or port must be specified when parentRefs includes
                    2 or more references to the same parent
                  rule: 'self.all(p1, self.all(p2, p1.group == p2.group && p1.kind
                    == p2.kind && p1.name == p2.name && (((!has(p1.__namespace__)
                    || p1.__namespace__ == '''') && (!has(p2.__namespace__) || p2.__namespace__
                    == '''')) || (has(p1.__namespace__) && has(p2.__namespace__) &&
                    p1.__namespace__ == p2.__namespace__)) ? ((!has(p1.sectionName)
                    || p1.sectionName == '''') == (!has(p2.sectionName) || p2.sectionName
                    == '''') && (!has(p1.port) || p1.port == 0) == (!has(p2.port)
                    || p2.port == 0)): true))'
                - message: sectionName or port must be unique when parentRefs includes
                    2 or more references to the same parent
                  rule: self.all(p1, self.exists_one(p2, p1.group == p2.group && p1.kind
                    == p2.kind && p1.name == p2.name && (((!has(p1.__namespace__)
                    || p1.__namespace__ == '') && (!has(p2.__namespace__) || p2.__namespace__
                    == '')) || (has(p1.__namespace__) && has(p2.__namespace__) &&
                    p1.__namespace__ == p2.__namespace__ )) && (((!has(p1.sectionName)
                    || p1.sectionName == '') && (!has(p2.sectionName) || p2.sectionName
                    == '')) || ( has(p1.sectionName) && has(p2.sectionName) && p1.sectionName
                    == p2.sectionName)) && (((!has(p1.port) || p1.port == 0) && (!has(p2.port)
                    || p2.port == 0)) || (has(p1.port) && has(p2.port) && p1.port
                    == p2.port))))
              snatpoolIps:
                description: |-
                  SnatpoolIps refers to Dual Stack Support. It must be a RFC 1123 label.


                  This validation is based off of the corresponding Kubernetes validation:
                  https://github.com/kubernetes/apimachinery/blob/02cfb53916346d085a6c6c7c66f882e3c6b0eca6/pkg/util/validation/validation.go#L187


                  This is used for Namespace name validation here:
                  https://github.com/kubernetes/apimachinery/blob/02cfb53916346d085a6c6c7c66f882e3c6b0eca6/pkg/api/validation/generic.go#L63


                  Valid values include:


                  * "mycoolsnatpoolname", "false"
                items:
                  type: string
                type: array
              vlanList:
                description: |-
                  VlanList String array to list Vlans to restrict to or disable with
                  DisableListedVlan


                  Default: 0
                  Min: 0
                  Max: 4294967295
                  Valid values include:
                  * 0 - 4294967295
                items:
                  type: string
                type: array
            type: object
          status:
            description: Status defines the current state of EgressRoute.
            properties:
              parents:
                description: |-
                  Parents is a list of parent resources (usually Gateways) that are
                  associated with the route, and the status of the route with respect to
                  each parent. When this route attaches to a parent, the controller that
                  manages the parent must add an entry to this list when the controller
                  first sees the route and should update the entry as appropriate when the
                  route or gateway is modified.


                  Note that parent references that cannot be resolved by an implementation
                  of this API will not be added to this list. Implementations of this API
                  can only populate Route status for the Gateways/parent resources they are
                  responsible for.


                  A maximum of 32 Gateways will be represented in this list. An empty list
                  means the route has not been attached to any Gateway.
                items:
                  description: |-
                    RouteParentStatus describes the status of a route with respect to an
                    associated Parent.
                  properties:
                    conditions:
                      description: |-
                        Conditions describes the status of the route with respect to the Gateway.
                        Note that the route's availability is also subject to the Gateway's own
                        status conditions and listener status.


                        If the Route's ParentRef specifies an existing Gateway that supports
                        Routes of this kind AND that Gateway's controller has sufficient access,
                        then that Gateway's controller MUST set the "Accepted" condition on the
                        Route, to indicate whether the route has been accepted or rejected by the
                        Gateway, and why.


                        A Route MUST be considered "Accepted" if at least one of the Route's
                        rules is implemented by the Gateway.


                        There are a number of cases where the "Accepted" condition may not be set
                        due to lack of controller visibility, that includes when:


                        * The Route refers to a non-existent parent.
                        * The Route is of a type that the controller does not support.
                        * The Route is in a namespace the controller does not have access to.
                      items:
                        description: "Condition contains details for one aspect of
                          the current state of this API Resource.\n---\nThis struct
                          is intended for direct use as an array at the field path
                          .status.conditions.  For example,\n\n\n\ttype FooStatus
                          struct{\n\t    // Represents the observations of a foo's
                          current state.\n\t    // Known .status.conditions.type are:
                          \"Available\", \"Progressing\", and \"Degraded\"\n\t    //
                          +patchMergeKey=type\n\t    // +patchStrategy=merge\n\t    //
                          +listType=map\n\t    // +listMapKey=type\n\t    Conditions
                          []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\"
                          patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`\n\n\n\t
                          \   // other fields\n\t}"
                        properties:
                          lastTransitionTime:
                            description: |-
                              lastTransitionTime is the last time the condition transitioned from one status to another.
                              This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                            format: date-time
                            type: string
                          message:
                            description: |-
                              message is a human readable message indicating details about the transition.
                              This may be an empty string.
                            maxLength: 32768
                            type: string
                          observedGeneration:
                            description: |-
                              observedGeneration represents the .metadata.generation that the condition was set based upon.
                              For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                              with respect to the current state of the instance.
                            format: int64
                            minimum: 0
                            type: integer
                          reason:
                            description: |-
                              reason contains a programmatic identifier indicating the reason for the condition's last transition.
                              Producers of specific condition types may define expected values and meanings for this field,
                              and whether the values are considered a guaranteed API.
                              The value should be a CamelCase string.
                              This field may not be empty.
                            maxLength: 1024
                            minLength: 1
                            pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                            type: string
                          status:
                            description: status of the condition, one of True, False,
                              Unknown.
                            enum:
                            - "True"
                            - "False"
                            - Unknown
                            type: string
                          type:
                            description: |-
                              type of condition in CamelCase or in foo.example.com/CamelCase.
                              ---
                              Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be
                              useful (see .node.status.conditions), the ability to deconflict is important.
                              The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                            maxLength: 316
                            pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                            type: string
                        required:
                        - lastTransitionTime
                        - message
                        - reason
                        - status
                        - type
                        type: object
                      maxItems: 8
                      minItems: 1
                      type: array
                      x-kubernetes-list-map-keys:
                      - type
                      x-kubernetes-list-type: map
                    controllerName:
                      description: |-
                        ControllerName is a domain/path string that indicates the name of the
                        controller that wrote this status. This corresponds with the
                        controllerName field on GatewayClass.


                        Example: "example.net/gateway-controller".


                        The format of this field is DOMAIN "/" PATH, where DOMAIN and PATH are
                        valid Kubernetes names
                        (https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).


                        Controllers MUST populate this field when writing status. Controllers should ensure that
                        entries to status populated with their ControllerName are cleaned up when they are no
                        longer necessary.
                      maxLength: 253
                      minLength: 1
                      pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*\/[A-Za-z0-9\/\-._~%!$&'()*+,;=:]+$
                      type: string
                    parentRef:
                      description: |-
                        ParentRef corresponds with a ParentRef in the spec that this
                        RouteParentStatus struct describes the status of.
                      properties:
                        group:
                          default: gateway.networking.k8s.io
                          description: |-
                            Group is the group of the referent.
                            When unspecified, "gateway.networking.k8s.io" is inferred.
                            To set the core API group (such as for a "Service" kind referent),
                            Group must be explicitly set to "" (empty string).


                            Support: Core
                          maxLength: 253
                          pattern: ^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
                          type: string
                        kind:
                          default: Gateway
                          description: |-
                            Kind is kind of the referent.


                            There are two kinds of parent resources with "Core" support:


                            * Gateway (Gateway conformance profile)
                            * Service (Mesh conformance profile, experimental, ClusterIP Services only)


                            Support for other resources is Implementation-Specific.
                          maxLength: 63
                          minLength: 1
                          pattern: ^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$
                          type: string
                        name:
                          description: |-
                            Name is the name of the referent.


                            Support: Core
                          maxLength: 253
                          minLength: 1
                          type: string
                        namespace:
                          description: |-
                            Namespace is the namespace of the referent. When unspecified, this refers
                            to the local namespace of the Route.


                            Note that there are specific rules for ParentRefs which cross namespace
                            boundaries. Cross-namespace references are only valid if they are explicitly
                            allowed by something in the namespace they are referring to. For example:
                            Gateway has the AllowedRoutes field, and ReferenceGrant provides a
                            generic way to enable any other kind of cross-namespace reference.



                            ParentRefs from a Route to a Service in the same namespace are "producer"
                            routes, which apply default routing rules to inbound connections from
                            any namespace to the Service.


                            ParentRefs from a Route to a Service in a different namespace are
                            "consumer" routes, and these routing rules are only applied to outbound
                            connections originating from the same namespace as the Route, for which
                            the intended destination of the connections are a Service targeted as a
                            ParentRef of the Route.



                            Support: Core
                          maxLength: 63
                          minLength: 1
                          pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?$
                          type: string
                        port:
                          description: |+
                            Port is the network port this Route targets. It can be interpreted
                            differently based on the type of parent resource.


                            When the parent resource is a Gateway, this targets all listeners
                            listening on the specified port that also support this kind of Route(and
                            select this Route). It's not recommended to set `Port` unless the
                            networking behaviors specified in a Route must apply to a specific port
                            as opposed to a listener(s) whose port(s) may be changed. When both Port
                            and SectionName are specified, the name and port of the selected listener
                            must match both specified values.



                            When the parent resource is a Service, this targets a specific port in the
                            Service spec. When both Port (experimental) and SectionName are specified,
                            the name and port of the selected port must match both specified values.



                            Implementations MAY choose to support other parent resources.
                            Implementations supporting other types of parent resources MUST clearly
                            document how/if Port is interpreted.


                            For the purpose of status, an attachment is considered successful as
                            long as the parent resource accepts it partially. For example, Gateway
                            listeners can restrict which Routes can attach to them by Route kind,
                            namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
                            from the referencing Route, the Route MUST be considered successfully
                            attached. If no Gateway listeners accept attachment from this Route,
                            the Route MUST be considered detached from the Gateway.


                            Support: Extended


                          format: int32
                          maximum: 65535
                          minimum: 1
                          type: integer
                        sectionName:
                          description: |-
                            SectionName is the name of a section within the target resource. In the
                            following resources, SectionName is interpreted as the following:


                            * Gateway: Listener Name. When both Port (experimental) and SectionName
                            are specified, the name and port of the selected listener must match
                            both specified values.
                            * Service: Port Name. When both Port (experimental) and SectionName
                            are specified, the name and port of the selected listener must match
                            both specified values. Note that attaching Routes to Services as Parents
                            is part of experimental Mesh support and is not supported for any other
                            purpose.


                            Implementations MAY choose to support attaching Routes to other resources.
                            If that is the case, they MUST clearly document how SectionName is
                            interpreted.


                            When unspecified (empty string), this will reference the entire resource.
                            For the purpose of status, an attachment is considered successful if at
                            least one section in the parent resource accepts it. For example, Gateway
                            listeners can restrict which Routes can attach to them by Route kind,
                            namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
                            the referencing Route, the Route MUST be considered successfully
                            attached. If no Gateway listeners accept attachment from this Route, the
                            Route MUST be considered detached from the Gateway.


                            Support: Core
                          maxLength: 253
                          minLength: 1
                          pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
                          type: string
                      required:
                      - name
                      type: object
                  required:
                  - controllerName
                  - parentRef
                  type: object
                maxItems: 32
                type: array
            required:
            - parents
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: null
  storedVersions: null
